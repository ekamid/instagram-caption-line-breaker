{"version":3,"sources":["components/Header.js","components/Footer.js","components/ActionBtn.js","components/CaptionInput.js","components/HowToUse.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","href","ActionBtn","covertAndCopy","clearCaption","type","onClick","CaptionInput","useState","caption","setCaption","a","length","swal","button","convertedCaption","replace","navigator","clipboard","writeText","console","error","title","icon","buttons","dangerMode","then","willDelete","rows","value","onChange","e","target","placeholder","HowToUse","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.226ac671.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"jumbotron text-center p-1 mb-3\">\r\n      <h2 className=\"display-5\">InstaCaptioner</h2>\r\n      <p className=\"lead\">Add line breaks in your instagram caption.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n      <div className=\"footer-copyright text-center py-2\">\r\n        Â© 2020 Copyright:\r\n        <a href=\"https://github.com/ekamid\"> ekamid</a>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nconst ActionBtn = ({ covertAndCopy, clearCaption }) => {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={covertAndCopy}\r\n        >\r\n          Convert And Copy\r\n        </button>\r\n      </div>\r\n      <div className=\"col-4\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger  float-right\"\r\n          onClick={clearCaption}\r\n        >\r\n          Clear\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActionBtn;\r\n","import React, { useState } from \"react\";\r\nimport ActionBtn from \"./ActionBtn\";\r\n\r\nimport swal from \"sweetalert\";\r\n\r\nconst CaptionInput = () => {\r\n  const [caption, setCaption] = useState(\"\");\r\n\r\n  const covertAndCopy = async () => {\r\n    if (caption.length === 0) {\r\n      swal(\"Oh Noo!\", \"Caption is empty\", \"error\", {\r\n        button: \"Trying Again\",\r\n      });\r\n    } else {\r\n      let convertedCaption = caption.replace(/\\n/g, \" \\n\");\r\n      if (caption.length >= 2200) {\r\n        swal(\"Wait!\", \"Instagram Caption Character limit is 2200\", \"warning\", {\r\n          button: \"Deleting Some\",\r\n        });\r\n      } else {\r\n        try {\r\n          await navigator.clipboard.writeText(convertedCaption);\r\n          swal(\"GREAT!\", \"Caption Copied To Clipboard!\", \"success\", {\r\n            button: \"Aww yiss!\",\r\n          });\r\n        } catch (err) {\r\n          console.error(\"Async: Could not copy text: \", err);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const clearCaption = () => {\r\n    swal({\r\n      title: \"Do you want to clear Caption?\",\r\n      icon: \"warning\",\r\n      buttons: true,\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        setCaption(\"\");\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleOnChange = (e) => {\r\n    setCaption(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container pl-5 pr-5 pb-3 pt-1\">\r\n      <ActionBtn covertAndCopy={covertAndCopy} clearCaption={clearCaption} />\r\n      <div className=\"form-group mt-2\">\r\n        <textarea\r\n          className=\"form-control\"\r\n          rows=\"10\"\r\n          value={caption}\r\n          onChange={handleOnChange}\r\n          placeholder=\"Paste Or Write Your Instagram Caption...\"\r\n        ></textarea>\r\n        <h6 className=\"mt-1\">\r\n          <span className=\"text-danger\">{caption.length}</span>/2200(Max\r\n          Characters for Instagram Caption)\r\n        </h6>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CaptionInput;\r\n","import React from \"react\";\r\n\r\nconst HowToUse = () => {\r\n  return (\r\n    <div className=\"container pl-5 pr-5 pb-3\">\r\n      <ul className=\"list-group\">\r\n        <h4>How To USE</h4>\r\n        <li className=\"list-group-item\">Paste or write your text</li>\r\n        <li className=\"list-group-item\">Convert and Copy</li>\r\n        <li className=\"list-group-item\">Paste as instagram caption</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HowToUse;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport CaptionInput from \"./components/CaptionInput\";\nimport HowToUse from \"./components/HowToUse\";\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <CaptionInput />\n      <HowToUse />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}